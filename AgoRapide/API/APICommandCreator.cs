// Copyright (c) 2016, 2017, 2018 Bjørn Erling Fløtten, Trondheim, Norway
// MIT licensed. Details at https://github.com/AgoRapide/AgoRapide/blob/master/LICENSE
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AgoRapide.Core;
using AgoRapide;

namespace AgoRapide.API {

    /// <summary>
    /// <summary>
    [Class(
        Description =
            "This class serves the following purposes:\r\n" +
            "1) Create API commands like Person/42,\r\n" +
            "2) Create complete API URLs like https://sample.AgoRapide.com/api/Person/42/HTML and\r\n" +
            "3) Create API links like {a href=\"https://AgoRapide.com/api/Person/42/HTML\"}John Smith{/a}\r\n" +
            "\r\n" +
            "API commands are all generated by static methods\r\n" +
            "\r\n" +
            "API URLs are created through an instance because -" + nameof(ResponseFormat) + "- is needed \r\n" +
            "in order to decide ending of URL (like \"/HTML\", \"/CSV+\" (or no ending for JSON)).\r\n" +
            "In addition -" + nameof(ConfigurationAttribute.BaseUrl) + "- is found through static context Util.Configuration.C.BaseUrl\r\n"
    )]
    public class APICommandCreator {

        public ResponseFormat ResponseFormat { get; private set; }
        private APICommandCreator(ResponseFormat responseFormat) => ResponseFormat = responseFormat;

        /// <summary>
        /// Creates API command for <see cref="CoreAPIMethod.EntityIndex"/> for <paramref name="entity"/>.
        /// like "Person/42"
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public static string CreateAPICommand(BaseEntity entity) => CreateAPICommand(CoreAPIMethod.EntityIndex, entity.GetType(), entity.IdString);

        /// <summary>
        /// Creates API command for <see cref="CoreAPIMethod.EntityIndex"/> for <paramref name="entityType"/> and <paramref name="id"/> 
        /// like "Person/42"
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public static string CreateAPICommand(Type entityType, long id) => CreateAPICommand(CoreAPIMethod.EntityIndex, entityType, new QueryIdInteger(id));

        /// <summary>
        /// Creates API command for a <see cref="CoreAPIMethod"/>
        /// Example for <see cref="CoreAPIMethod.History"/> and type Person with parameters 42 could be 
        /// "Person/42/History".
        /// </summary>
        /// <param name="coreMethod"></param>
        /// <param name="type"></param>
        /// <param name="parameters"></param>
        /// <returns></returns>
        public static string CreateAPICommand(CoreAPIMethod coreMethod, Type type = null, params object[] parameters) => APIMethod.GetByCoreMethodAndEntityType(coreMethod, type).GetAPICommand(parameters);

        /// <summary>
        /// Creates complete API URL for <see cref="CoreAPIMethod.EntityIndex"/> for <paramref name="entity"/>.
        /// like "https://sample.AgoRapide.com/api/Person/42/HTML"
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public Uri CreateAPIUrl(BaseEntity entity) => CreateAPIUrl(CreateAPICommand(entity));

        /// <summary>
        /// Creates complete API URL for <see cref="CoreAPIMethod.EntityIndex"/> for <paramref name="entityType"/> and <paramref name="id"/> 
        /// like "https://sample.AgoRapide.com/api/Person/42/HTML"
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public Uri CreateAPIUrl(Type entityType, long id) => CreateAPIUrl(CreateAPICommand(entityType, id));

        /// <summary>
        /// Creates complete API URL for <paramref name="coreMethod"/> and <paramref name="type"/>.
        /// Example for <see cref="CoreAPIMethod.History"/> and type Person with parameters 42 could be 
        /// "https://sample.AgoRapide.com/api/Person/42/History/HTML".
        /// </summary>
        /// <param name="coreMethod"></param>
        /// <param name="type"></param>
        /// <param name="parameters"></param>
        /// <returns></returns>
        public Uri CreateAPIUrl(CoreAPIMethod coreMethod, Type type = null, params object[] parameters) => CreateAPIUrl(CreateAPICommand(coreMethod, type, parameters));

        /// <summary>
        /// Prepends <see cref="ConfigurationAttribute.BaseUrl"/> and appends <see cref="ResponseFormat"/> to the given <paramref name="apiCommand"/>
        /// Example: For input "Person/42" will return something like "https://sample.AgoRapide.com/api/Person/42/HTML".
        /// </summary>
        /// <param name="apiCommand"></param>
        /// <returns></returns>
        public Uri CreateAPIUrl(string apiCommand) => CreateAPIUrl(apiCommand, ResponseFormat);

        /// <summary>
        /// Prepends <see cref="ConfigurationAttribute.BaseUrl"/> and appends <paramref name="responseFormat"/> to the given <paramref name="apiCommand"/>
        /// Example: For input "Person/42" will return something like "https://sample.AgoRapide.com/api/Person/42/HTML".
        /// </summary>
        /// <param name="apiCommand">If not starts with http:// or https:// then <see cref="ConfigurationAttribute.BaseUrl"/> will be prepended</param>
        /// <param name="responseFormat"></param>
        /// <returns></returns>
        public static Uri CreateAPIUrl(string apiCommand, ResponseFormat responseFormat) => new Uri((apiCommand.StartsWith("http://") || apiCommand.StartsWith("https://") ? "" :
            Util.Configuration.C.BaseUrl.ToString()) + apiCommand +
                (responseFormat == ResponseFormat.HTML ? Util.Configuration.C.HTMLPostfixIndicator :
                (responseFormat == ResponseFormat.CSV ? Util.Configuration.C.CSVPostfixIndicator :
                (responseFormat == ResponseFormat.PDF ? Util.Configuration.C.PDFPostfixIndicator :
                ""))));

        /// <summary>
        /// Creates HTML API link for <see cref="CoreAPIMethod.EntityIndex"/> for <paramref name="entity"/> 
        /// like {a href="https://AgoRapide.com/api/Person/42/HTML"}John Smith{/a}
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="linkText">May be null in which case <see cref="BaseEntity.IdFriendly"/> will be used.</param>
        /// <returns></returns>
        public string CreateAPILink(BaseEntity entity, string linkText = null) => CreateAPILink(CoreAPIMethod.EntityIndex, linkText ?? entity.IdFriendly, entity.GetType(), entity.IdString);

        /// <summary>
        /// Creates HTML API link for <see cref="CoreAPIMethod.EntityIndex"/> for <paramref name="entityType"/> and <paramref name="id"/>
        /// like {a href="https://AgoRapide.com/api/Person/42/HTML"}John Smith{/a}
        /// </summary>
        /// <param name="entityType"></param>
        /// <param name="id"></param>
        /// <param name="linkText">May be null in which case <paramref name="id"/> will be used.</param>
        /// <returns></returns>
        public string CreateAPILink(Type entityType, long id, string linkText = null) => CreateAPILink(CoreAPIMethod.EntityIndex, linkText ?? id.ToString(), entityType, id.ToString());

        /// <summary>
        /// Creates HTML API link for <paramref name="coreMethod"/> and <paramref name="type"/>. 
        /// The complete URL will also be the text of the link.
        /// Example for <see cref="CoreAPIMethod.History"/> and type Person with parameters 42 could be 
        /// {a href="https://sample.AgoRapide.com/api/Person/42/History/HTML"}https://sample.AgoRapide.com/api/Person/42/History/HTML{/a}
        /// NOTE: Use overload with linkText, and set linkText to null if you want CoreAPIMethod as link text.
        /// </summary>
        /// <param name="coreMethod"></param>
        /// <param name="type"></param>
        /// <param name="parameters"></param>
        /// <returns></returns>
        public string CreateAPILink(CoreAPIMethod coreMethod, Type type, params object[] parameters) => CreateAPILink(coreMethod, null, null, type, parameters);

        /// <summary>
        /// Creates HTML API link for <paramref name="coreMethod"/> and <paramref name="type"/> with the given <paramref name="linkText"/>.
        /// Example for <see cref="CoreAPIMethod.History"/> and type Person with parameters 42 could be 
        /// {a href="https://sample.AgoRapide.com/api/Person/42/History/HTML"}History{/a}
        /// </summary>
        /// <param name="coreMethod"></param>
        /// <param name="linkText">May be null in which case <paramref name="coreMethod"/> in itself will be used</param>
        /// <param name="type"></param>
        /// <param name="parameters"></param>
        /// <returns></returns>
        public string CreateAPILink(CoreAPIMethod coreMethod, string linkText, Type type, params object[] parameters) => CreateAPILink(coreMethod, linkText ?? coreMethod.ToString(), null, type, parameters);

        /// <summary>
        /// Creates HTML API link for <paramref name="coreMethod"/> and <paramref name="type"/> with the given <paramref name="linkText"/>.
        /// Example for <see cref="CoreAPIMethod.History"/> and type Person with parameters 42 could be 
        /// {a href="https://sample.AgoRapide.com/api/Person/42/History/HTML"}History{/a}
        /// With <paramref name="helpText"/> "Age 42, married" the result could be:
        /// {span title=\"Age 42 married\"}{a href="https://sample.AgoRapide.com/api/Person/42/HTML"}History{/a}{/span}
        /// </summary>
        /// <param name="coreMethod"></param>
        /// <param name="linkText">May be null in which case <paramref name="apiCommand"/> will be used.</param>
        /// <param name="helpText">May be null. If given then link will be enclosed in a \"tooltip\" (HTML "span"-tag with attribute "title" as the given text)</param>
        /// <param name="type"></param>
        /// <param name="parameters"></param>
        /// <returns></returns>
        public string CreateAPILink(CoreAPIMethod coreMethod, string linkText, string helpText, Type type, params object[] parameters) {
            var apiCommand = CreateAPICommand(coreMethod, type, parameters);
            return CreateAPILink(apiCommand, linkText, helpText);
        }

        /// <summary>
        /// Creates HTML API link for <paramref name="apiCommand"/>
        /// Example: For input "Person/42" will return something like {a href="https://sample.AgoRapide.com/api/Person/42/HTML"}Person/42{/a}
        /// </summary>
        /// <param name="apiCommand"></param>
        /// <param name="linkText">May be null in which case <paramref name="apiCommand"/> will be used.</param>
        /// <returns></returns>
        public string CreateAPILink(string apiCommand, string linkText = null) => CreateAPILink(apiCommand, linkText ?? apiCommand, null);

        /// <summary>
        /// Example with <paramref name="apiCommand"/> "Person/42" and <paramref name="linkText"/> "John Smith" could be
        /// {a href="https://sample.AgoRapide.com/api/Person/42/HTML"}John Smith{/a}
        /// With <paramref name="helpText"/> "Age 42, married" the result could be:
        /// {span title=\"Age 42 married\"}{a href="https://sample.AgoRapide.com/api/Person/42/HTML"}John Smith{/a}{/span}
        /// </summary>
        /// <param name="apiCommand"></param>
        /// <param name="linkText">May be null in which case <paramref name="apiCommand"/> in itself will be used</param>
        /// <param name="helpText">May be null. If given then link will be enclosed in a \"tooltip\" (HTML "span"-tag with attribute "title" as the given text)</param>
        /// <returns></returns>
        public string CreateAPILink(string apiCommand, string linkText, string helpText) =>
            (string.IsNullOrEmpty(helpText) ? "" : "<span title=\"" + helpText.HTMLEncode() + "\">") +
            "<a href=\"" + CreateAPIUrl(apiCommand) + "\">" + (string.IsNullOrEmpty(linkText) ? apiCommand : linkText).HTMLEncode().Replace(" ", "&nbsp") + "</a>" + /// Replacement of space with non-breaking space introduced 17 Nov 2017 in order to make Context-presentation by <see cref="Result.ToHTMLDetailed"/> better.
            (string.IsNullOrEmpty(helpText) ? "" : "</span>");

        /// <summary>
        /// Creates HTML API link for <paramref name="url"/>. 
        /// 
        /// TODO: This looks wrong, input-parameter is Uri but is passed here as an "apiCommand" string instead.
        /// TOOD: This would lead to duplicate start of URL (http://something...http://something...)
        /// </summary>
        /// <param name="url"></param>
        /// <param name="linkText">May be null in which case <paramref name="url"/> will be used.</param>
        /// <returns></returns>
        public string CreateAPILink(Uri url, string linkText = null) => CreateAPILink(url.ToString(), linkText ?? url.ToString().Replace(Util.Configuration.C.BaseUrl.ToString(), ""), null);

        public static APICommandCreator JSONInstance = new APICommandCreator(ResponseFormat.JSON);
        public static APICommandCreator HTMLInstance = new APICommandCreator(ResponseFormat.HTML);
        public static APICommandCreator PDFInstance = new APICommandCreator(ResponseFormat.PDF);
        public static APICommandCreator CSVInstance = new APICommandCreator(ResponseFormat.CSV);
    }
}