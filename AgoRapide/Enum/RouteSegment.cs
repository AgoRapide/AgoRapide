using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AgoRapide.API;
using AgoRapide.Core;

// REMOVE FILE FROM REPOSITORY. NO LONGER IN USE!!!

namespace AgoRapide {
    /// <summary>
    /// TODO: REMOVE THIS WHOLE CONCEPT. IT IS NO LONGER NEEDED, INSTEAD IT JUST CONFUSES.
    /// 
    /// API Route segment. 
    /// Do not confuse <see cref="AgoRapide.RouteSegment"/>-enum with <see cref="RouteSegmentClass{TProperty}"/>. 
    /// <see cref="AgoRapide.RouteSegment"/>-enum by itself is sufficient to describe a <see cref="RouteSegmentClass{TProperty}"/> but a <see cref="RouteSegmentClass{TProperty}"/>
    /// can also be described by other means.
    /// </summary>
    public enum RouteSegment {
        None,

        /// <summary>
        /// TODO: THIS MAY ALSO BE REMOVED!!!
        /// 
        /// Typically followed by <see cref="RouteSegmentClass{TProperty}.Property"/> like P.username or P.password.
        /// </summary>
        Add,

        /// <summary>
        /// TODO: TO BE REMOVED. 
        /// TODO: REPLACED WITH CLASS <see cref="AgoRapide.Core.Id"/>
        /// 
        /// id is a string parameter which in the actual API call will identify one or multiple entities like: 
        /// 1) A (long) integer specifying a primary key in the database
        /// 2) A SQL-like WHERE-clause like WHERE P.first_name LIKE 'Bjørn%'
        /// 3) A combination of the above separated by comma like 42,43,44
        /// 
        /// If only id is given in the route template (with no more RouteSegments) then that will be considered as an Index operation 
        /// (corresponding Controller-method should then be called "Index")
        /// 
        /// See correspondence between <see cref="RouteSegment.Id"/> and <see cref="APIMethod{TProperty}.HasIdParameter"/>
        /// </summary>
        Id,

        /// <summary>        
        /// TODO: Consider removing <see cref="RouteSegment.AddProperty"/>. It is most probably not needed since we create 
        /// TODO: <see cref="APIMethodOrigin.Autogenerated"/> <see cref="CoreMethod.AddProperty"/> in <see cref="APIMethod{TProperty}.CreateSemiAutogeneratedMethods"/>
        /// 
        /// See correspondence between <see cref="RouteSegment.AddProperty"/> and <see cref="CoreProperty.Key"/> / <see cref="CoreProperty.Value"/>
        /// Will typically result in a <see cref="APIMethod{TProperty}.RouteTemplates"/> ending with something like AddProperty/{key}/{value}
        /// </summary>
        AddProperty,
    }
}
