using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using AgoRapide;
using AgoRapide.Core;
using AgoRapide.Database;
using AgoRapide.API;

namespace AgoRapideSample {
    /// <summary>
    /// Contains various demonstrative methods.
    /// You may delete this controller from your own project.
    /// 
    /// This file also exists for the purpose of showing that you (of course) may have multiple Controllers in your project.
    /// Note how each controller should be added as a parameter in the call to 
    /// <see cref="APIMethod.CreateSemiAutogeneratedMethods"/> in <see cref="WebApiConfig.Register"/>
    /// </summary>
    public class AnotherController : BaseController {

        /// <summary>
        /// NOTICE TO DEVELOPER: Do not change any functionality here as method is used in the AgoRapide documentation 
        /// NOTICE TO DEVELOPER: (including demonstration of exception handling mechanism, like overflow for instance)
        /// </summary>
        /// <param name="SomeNumber"></param>
        /// <returns></returns>
        [HttpGet]
        [Method(
            Description = "Doubles the number given (every time)",
            S1 = nameof(DemoDoubler), S2 = P.SomeNumber)]
        public object DemoDoubler(string SomeNumber) {
            try {
                if (!TryGetRequest(SomeNumber, out var request, out var completeErrorResponse)) return completeErrorResponse;
                var answer = checked(request.Parameters.PV<long>(P.SomeNumber.A()) * 2);
                return request.GetOKResponseAsText(answer.ToString(), "Your number doubled is: " + answer);
            } catch (Exception ex) {
                return HandleExceptionAndGenerateResponse(ex);
            } finally {
                DBDispose();
            }
        }

        [HttpGet]
        [Method(
            Environment = AgoRapide.Environment.Development, // This method will not show up on your Production-server.
            Description = "Triples the number given (every time)",
            S1 = nameof(DemoTripler), S2 = P.SomeNumber)]
        public object DemoTripler(string SomeNumber) {
            try {
                if (!TryGetRequest(SomeNumber, out var request, out var completeErrorResponse)) return completeErrorResponse;
                var answer = request.Parameters.PV<long>(P.SomeNumber.A()) * 3;
                return request.GetOKResponseAsText(answer.ToString(), "Your number tripled is: " + answer);
            } catch (Exception ex) {
                return HandleExceptionAndGenerateResponse(ex);
            } finally {
                DBDispose();
            }
        }

        [HttpGet]
        [Method(
            Description = "Demonstrates use of " + nameof(AgoRapideAttribute.IsMany) + ". Call with id of a Car-object",
            S1 = nameof(CarIsManyExample), S2 = CoreP.IntegerQueryId)]
        public object CarIsManyExample(string IntegerQueryId) {
            try {
                if (!TryGetRequest(IntegerQueryId, out var request, out var completeErrorResponse)) return completeErrorResponse;
                if (!DB.TryGetEntity(request.CurrentUser, request.Parameters.PVM<IntegerQueryId>(), AccessType.Read, useCache: false, entity: out Car car, errorResponse: out var errorResponse)) return request.GetErrorResponse(errorResponse);
                var allColours = car.PV<List<string>>(P.Colour2);
                return request.GetOKResponseAsText("Hello", "");
            } catch (Exception ex) {
                return HandleExceptionAndGenerateResponse(ex);
            } finally {
                DBDispose();
            }
        }

    }
}