using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Http;
using System.ComponentModel;
using AgoRapide;
using AgoRapide.Core;
using AgoRapide.API;

namespace AgoRapideSample {
    public class HomeController : BaseController {

        /// <summary>
        /// TODO: MOVE THIS INTO AgoRapide.BaseController!
        /// TODO: Or rather, use <see cref="APIMethodOrigin.Autogenerated"/>) routing directly to relevant method in <see cref="BaseController{TProperty}"/>
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [Method(CoreMethod = CoreMethod.RootIndex)]
        public object RootIndex() {
            try {
                // Due to bug in Visual Studio 2017 RC build 15.0.26014.0 we can not inline variable declaration here. Leads to CS1003	Syntax error, ',' expected
                ValidRequest<P> request; object errorResponse; if (!TryGetRequest(out request, out errorResponse)) return errorResponse;
                request.ForceHTMLResponse(); // It is much more user friendly to have HTML respons always here. If JSON is needed it can always be obtained by querying api/Method/All or similar.
                // TODO: Replace this with dictionary with links
                // TODO: Like AllMethods, AllClassAndMethod, AllEnumClass
                return request.GetOKResponseAsMultipleEntities(APIMethod<P>.AllMethods.Select(m => (BaseEntityT<P>)m).ToList());
            } catch (Exception ex) {
                return HandleExceptionAndGenerateResponse(ex);
            } finally {
                DBDispose();
            }
        }

        /// <summary>
        /// Note how this method must be implemented in the application itself since it by nature is application specific. 
        /// In other words it can not be moved into <see cref="BaseController{TProperty}"/>. 
        /// 
        /// 
        /// </summary>
        /// <param name="GeneralQueryId"></param>
        /// <returns></returns>
        [HttpGet]
        [OverrideAuthentication]
        [BasicAuthentication(AccessLevelUse = AccessLevel.User)]
        [Method(
            Description = "Returns all persons where one of -" + nameof(P.FirstName) + "-, -" + nameof(P.LastName) + "- or -" + nameof(P.Email) + "- matches {" + nameof(CoreProperty.GeneralQueryId) + "}",
            S1 = nameof(CoreMethod.GeneralQuery), S2 = CoreProperty.GeneralQueryId, CoreMethod = CoreMethod.GeneralQuery)]
        public object GeneralQuery(string GeneralQueryId) {
            try {
                // Due to bug in Visual Studio 2017 RC build 15.0.26014.0 we can not inline variable declaration here. Leads to CS1003	Syntax error, ',' expected
                ValidRequest<P> request; object errorResponse; if (!TryGetRequest(GeneralQueryId, out request, out errorResponse)) return errorResponse;

                /// TODO: PostgreSQL specific? Where do we want to add this?
                /// TODO: Should we add a WILDCARD-parameter to <see cref="PropertyValueQueryId{TProperty}"/>.
                if (!GeneralQueryId.EndsWith("%")) GeneralQueryId += "%";

                QueryId<P> queryId = new PropertyValueQueryId<P>(new List<P> {
                    P.FirstName,  // Add all keys that you consider
                    P.LastName,   // relevant for a general query here
                    P.Email       // (remember to optimize database correspondingly, like using partial indexes in PostgreSQL)
                }, Operator.ILIKE, GeneralQueryId);
                /// TODO: Add a LIMIT parameter to <see cref="PropertyValueQueryId{TProperty}"/>.
                /// Note relatively expensive reading of whole <see cref="Person"/>-objects now. 
                List<Person> persons; Tuple<ResultCode, string> tplErrorResponse; if (!DB.TryGetEntities(                    
                    request.CurrentUser.RepresentedByEntity ?? request.CurrentUser, /// Note how search will always be done viewed from <see cref="BaseEntityT{TProperty}.RepresentedByEntity"/>
                    queryId,
                    AccessType.Read, useCache: true,
                    entities: out persons,
                    errorResponse: out tplErrorResponse)) return request.GetErrorResponse(tplErrorResponse);
                // Note, you can search for other types of entities here also, and add the corresponding persons to the
                // persons collection found now. 
                if (persons.Count == 0) return request.GetErrorResponse(ResultCode.data_error, "No persons found for query '" + GeneralQueryId + "'");
                return request.GetOKResponseAsMultipleEntities(persons.Select(p => {
                    var r = new GeneralQueryResult<P>();
                    r.AddProperty(M(CoreProperty.AccessLevelRead), AccessLevel.Anonymous); /// Since <see cref="AgoRapideAttribute.Parents"/> are specified for properties belonging to <see cref="GeneralQueryResult{TProperty}"/> we must also set general access right for each and every such entity.
                    r.AddProperty(
                        M(CoreProperty.SuggestedUrl), 
                        request.CreateAPIUrl(
                            CoreMethod.UpdateProperty, 
                            typeof(Person),  /// Note important point here, do NOT set <see cref="CoreProperty.EntityToRepresent"/> for <see cref="CoreProperty.EntityToRepresent"/>!
                            new IntegerQueryId<P>(request.CurrentUser.RepresentedByEntity?.Id ?? request.CurrentUser.Id), M(CoreProperty.EntityToRepresent), p.Id.ToString()
                        )
                    );
                    r.AddProperty(M(CoreProperty.Description), p.Name);
                    return (BaseEntityT<P>)r;
                }).ToList());
            } catch (Exception ex) {
                return HandleExceptionAndGenerateResponse(ex);
            } finally {
                DBDispose();
            }
        }

        /// <summary>
        /// TODO: MOVE THIS INTO AgoRapide.BaseController!
        /// TODO: AND MAKE A CORE METHOD OUT OF THIS!
        /// TODO: Or rather, use <see cref="APIMethodOrigin.Autogenerated"/>) routing directly to relevant method in <see cref="BaseController{TProperty}"/>
        /// TODO: (maybe not possible since email / password, type of entity (Person) and so on is quite specific for the actual application.
        /// </summary>
        /// <param name="Email"></param>
        /// <param name="Password"></param>
        /// <returns></returns>
        [HttpGet]
        [HttpPost]
        [Method(
            S1 = "AddFirstAdminUser", S2 = P.Email, S3 = P.Password, Description =
            "Adds the first administrative user to the system (with -" + nameof(P) + "." + nameof(P.AccessLevelGiven) + "- = -" + nameof(AccessLevel) + "." + nameof(AccessLevel.Admin) + "-. " +
            "Only allowed if no entities of type -" + nameof(Person) + "- exists",
            ShowDetailedResult = true)]
        public object AddFirstAdminUser(string Email, string Password) {
            try {
                // Due to bug in Visual Studio 2017 RC build 15.0.26014.0 we can not inline variable declaration here. Leads to CS1003	Syntax error, ',' expected
                ValidRequest<P> request; object errorResponse; if (!TryGetRequest(Email, Password, out request, out errorResponse)) return errorResponse;

                // Check that the only person in the database at the moment is the anonymous user created by Startup.cs
                // ------------------------------
                // TODO: CHECK IN Startup if PERSONS EXISTS AND DISABLE THIS METHOD IF IT DOES (less costly, less risk of DDOS against this method)
                // (it not disabled we can still make a check, reading all entities)
                var persons = DB.GetRootPropertyIds(typeof(Person));  // TODO: This is costly! Check in a less costly manner!
                // TODO: If client has forgot admin credentials, give instructions for recovery. Like sending e-mail, deleting
                // TODO: password from database or deleting all properties for admin-user.
                var au = Util.Configuration.AnonymousUser;
                if (au == null) throw new Exception(nameof(Util.Configuration.AnonymousUser) + " not set up correctly (null)");
                if (au.Id <= 0) throw new Exception(nameof(Util.Configuration.AnonymousUser) + " not set up correctly (" + nameof(au.Id) + ": " + au.Id + ")");
                if (!au.GetType().Equals(typeof(Person))) throw new Exception(nameof(Util.Configuration.AnonymousUser) + " not set up correctly (type: " + au.GetType() + ")");
                // Check above is in order for Count > 1 below to work out
                if (persons.Count > 1) return request.GetErrorResponse(ResultCode.data_error, "Admin user already exists. There is no need for calling this method.");
                if (persons[0] != au.Id) throw new Exception(nameof(Util.Configuration.AnonymousUser) + " not set up correctly (" + nameof(au.Id) + " " + au.Id + " does not correspond to " + nameof(DB.GetRootPropertyIds) + " result which was " + persons[0] + ")");
                // ------------------------------
                request.Parameters.AddProperty(M(CoreProperty.AccessLevelGiven), AccessLevel.Admin);
                request.Result.LogInternal("Note how this API-method gives you a high level of details in the generated result because -" + nameof(MethodAttribute) + "." + nameof(MethodAttribute.ShowDetailedResult) + "- = true", GetType());
                return request.GetOKResponseAsEntityId(typeof(Person), DB.CreateEntity<Person>(GetId(), request.Parameters, request.Result), null);
            } catch (Exception ex) {
                return HandleExceptionAndGenerateResponse(ex);
            } finally {
                DBDispose();
            }
        }

        /// <summary>
        /// TODO: MOVE THIS INTO AgoRapide.BaseController!
        /// TODO: Or rather, use <see cref="APIMethodOrigin.Autogenerated"/>) routing directly to relevant method in <see cref="BaseController{TProperty}"/>
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [HttpPost]
        [OverrideAuthentication]
        [BasicAuthentication(AccessLevelUse = AccessLevel.User)] // Stricter access like administrative access will be considered further downstream (by AgoRapideGenericMethod)
        [Method(CoreMethod = CoreMethod.GenericMethod)]
        public object GenericMethod() {
            try {
                var method = GetMethod();
                return AgoRapideGenericMethod(method, CurrentUser(method));
            } catch (Exception ex) {
                return HandleExceptionAndGenerateResponse(ex);
            } finally {
                DBDispose();
            }
        }

        /// <summary>
        /// TODO: MOVE THIS INTO AgoRapide.BaseController!
        /// TODO: Or rather, use <see cref="APIMethodOrigin.Autogenerated"/>) routing directly to relevant method in <see cref="BaseController{TProperty}"/>
        /// </summary>
        /// <returns></returns>
        [OverrideAuthentication]
        [BasicAuthentication(AccessLevelUse = AccessLevel.Admin)]
        [HttpGet]
        [Method(CoreMethod = CoreMethod.ExceptionDetails, S1 = nameof(ExceptionDetails), AccessLevelUse = AccessLevel.Admin)]
        public object ExceptionDetails() {
            try {
                return HandleCoreMethodExceptionDetails(GetMethod());
            } catch (Exception ex) {
                return HandleExceptionAndGenerateResponse(ex);
            } finally {
                DBDispose();
            }
        }

        ///// <summary>
        ///// TODO: DOCUMENT CORRECTLYT
        ///// TODO: DELETE THIS? Together with <see cref="CoreMethod.HTTPStatus"/>???
        ///// --
        ///// Returns an HTTP / HTML-respons with the specified HTTP {status_code} and the specified plain-text {message}<br>
        ///// <br>
        ///// Not used by the API itself. Used for presentation of static HTML pages in order to have standardized error-pages<br>
        ///// <br>
        ///// TODO: Clarify this statement: 
        ///// Could be used in web.config in order to return standardised 404-responses where also the 404-code is kept
        ///// in order to function correct against search engines (see system.webServer, httpErrors)
        ///// <br>
        ///// If {status_code} is not given or if {status_code} is an invalid HTTP status code then 404 is assumed.<br>
        ///// If {message} is not given then "Page not found" is assumed.<br>
        ///// if {status_code} starts with '3' and {message} starts with 'http' then the HTTP Location header in the returned response will be set to {message}
        ///// <br>
        ///// HTML is returned regardless of HTML being added at the end of the query-string or not.<br>
        ///// <br>
        ///// SampleS:
        /////   Api("HTTPStatus")
        /////   Api("HTTPStatus?status_code=404")
        /////   Api("HTTPStatus?status_code=404&message=Page%20not%20found")
        /////   Api("HTTPStatus?status_code=301&message=http_COLON__SLASH__SLASH_new.location/")
        ///// --
        ///// </summary>
        ///// <returns></returns>
        //[HttpGet]
        //[Method(CoreMethod = CoreMethod.HTTPStatus, S1 = "HTTPStatus", S2 = P.http_status_code)]
        //public object HTTPStatus(string http_status_code) { // , string message) {
        //    try {
        //        // TODO: REPLACE THIS WITH TryGetParameter syntax
        //        // Due to bug in Visual Studio 2017 RC build 15.0.26014.0 we can not inline variable declaration here. Leads to CS1003	Syntax error, ',' expected
        //        System.Net.HttpStatusCode statusCode; if (!Util.EnumTryParse(http_status_code, out statusCode)) statusCode = System.Net.HttpStatusCode.NotFound;
        //        // TODO: REPLACE THIS WITH TryGetParameter syntax
        //        // TODO: (since with new system we can validate all parameters behind the scenes)

        //        throw new NotImplementedException();
        //        //if (string.IsNullOrEmpty(message)) message = "Page not found";
        //        //message = Util.UrlDecodeAdditional(message);
        //        //string location = null; if (message.ToLower().StartsWith("http") && ((int)statusCode).ToString().StartsWith("3")) location = message;
        //        //return GenerateHTMLResponse("<html><body><p>" + message.HTMLEncode() + "</p></body></html>", statusCode, location);
        //    } catch (Exception ex) {
        //        return HandleExceptionAndGenerateResponse(ex);
        //    } finally {
        //        DBDispose();
        //    }
        //}
    }
}