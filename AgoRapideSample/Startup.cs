using System;
using System.Linq;
using System.Collections.Generic;
// Due to some perceived confusion about origin of some methods, we deliberately omit some using-statements here
// and instead use the full namespace (and likewise call all extension methods "manually").

/// <summary>
/// This file (Startup.cs) contains the logic for startup and authentication.
/// Classes defined here are: 
/// Startup, 
/// WebAPIConfig, 
/// MethodP, 
/// BasicAuthenticationAttribute
/// </summary>
namespace AgoRapideSample {

    /// <summary>
    /// This class sets up the project to use OWIN / Katana.
    /// 
    /// See <see cref="Configuration"/> for information about adjustments that you must make according to Controllers and types used in your project.
    /// 
    /// Note that as of Dec 2016 it works better to launch AgoRapideSample from Visual Studio with F5 (Start debugging) instead of
    /// CTRL-F5  (Start without debugging). 
    /// </summary>
    public class Startup {

        /// <summary>
        /// Note that there are many different methods to obtain the environment under which we are running. 
        /// 
        /// The default used here is the most simple of all, looking for the existence of a given folder
        /// on disk. 
        /// 
        /// More traditional would be to use the web.config file and the configuration class.
        /// 
        /// The advantages of the method shown here is that it dispenses with the need for separate
        /// (and different) configuration files.
        /// </summary>
        /// <returns></returns>
        private Tuple<Uri, AgoRapide.Environment> GetEnvironment() {
            // We expected this to be possible in C# 7.0:
            // private (Uri rootUrl, AgoRapide.Environment environment) GetEnvironment() {
            // What happened to the promised named tuple elements?

            if (System.IO.Directory.Exists(@"C:\AgoRapide")) {
                return new Tuple<Uri, AgoRapide.Environment>(new Uri("http://localhost:52668/"), AgoRapide.Environment.Development);
            } else if (System.IO.Directory.Exists(@"D:\p\wwwRootAgoRapideSample")) {
                return new Tuple<Uri, AgoRapide.Environment>(new Uri("http://sample.agorapide.com"), AgoRapide.Environment.Production);
            } else {
                throw new UnknownEnvironmentException("Unable to recognize environment that application is running under.");
            }
        }

        /// <summary>
        /// IMPORTANT: Please note that: 
        /// 
        /// 1) Each Controller in your project should be added here as a parameter in the call to 
        ///    <see cref="AgoRapide.APIMethod{TProperty}.CreateSemiAutogeneratedMethods"/>
        ///    
        /// 2) Each <see cref="AgoRapide.BaseEntityT{TProperty}"/>-class in your project should be added here as a parameter in the call to
        ///    <see cref="AgoRapide.APIMethod{TProperty}.CreateAutogeneratedMethods"/>
        ///    
        /// 3) Each enum in your project should be included here in a call to 
        ///    <see cref="AgoRapide.EnumClass{TProperty}.RegisterEnumClass"/>
        /// </summary>
        /// <param name="appBuilder"></param>
        public void Configuration(Owin.IAppBuilder appBuilder) {
            try {
                var logPath = @"c:\p\Logfiles\AgoRapideSample\AgoRapideLog_[DATE_HOUR].txt";

                // Note how we set AgoRapide.Core.Util.Configuration twice, first in order to be able to log, second in order to set rootUrl and rootPath
                AgoRapide.Core.Util.Configuration = new AgoRapide.Core.Configuration(
                    logPath: logPath,
                    rootUrl: AgoRapide.Core.Util.Configuration.RootUrl
                );

                Log("");
                var dummy = new AgoRapide.CorePropertyMapper<P>(); // This will often fail for new projects. Therefore done as early as possible.

                //  var type = typeof(HomeController);
                var environment = GetEnvironment();

                // TODO: We expect to be able to do this:
                // var rootUrl = AgoRapide.Extensions.Use(System.Web.HttpContext.Current.Request.Url, u => u.Scheme + "://" + u.Host + (u.Port != 80 ? (":" + u.Port.ToString()) : "") + "/");
                // but we do not get the correct URL in that manner at this stage (maybe because there is not defined any "real" HttpRequest yet?)
                // Therefore we use the GetEnvironment method:
                var rootUrl = environment.Item1.ToString();
                Log("rootUrl: " + rootUrl);
                // rootPath works as expected
                var rootPath = System.Web.HttpContext.Current.Server.MapPath("") + @"\";
                /// TODO: REMOVE USE OF RootPath now that documentation if offered through general API mechanism
                Log("rootPath: " + rootPath);

                Log("environment: " + environment.Item2);

                var cpm = new AgoRapide.CorePropertyMapper<P>();
                var M = new Func<AgoRapide.CoreProperty, P>(p => cpm.Map(p));

                var systemUser = new Person();
                systemUser.AddProperty(M(AgoRapide.CoreProperty.AccessLevelGiven), AgoRapide.AccessLevel.System);

                // Note how we set AgoRapide.Core.Util.Configuration twice, first in order to be able to log, second in order to set rootUrl and rootPath
                AgoRapide.Core.Util.Configuration = new AgoRapide.Core.Configuration(
                    logPath: logPath,
                    rootUrl: rootUrl
                ) {
                    // Change to different version of JQuery by adding this line:
                    // ScriptRelativePaths = new List<string> { "Scripts/AgoRapide-0.1.js", "Scripts/jquery-3.1.1.min.js" },
                    SystemUser = systemUser,
                    Environment = environment.Item2,
                    SuperfluousStackTraceStrings = new List<string>() {
                        @"c:\git\AgoRapide",
                        @"C:\AgoRapide2\trunk\"
                    }
                    // ...
                    // Note how may change a lot of other configuration parameters here, as needed
                    // ...
                };

                Log("Going through all " + typeof(P) + " attributes in order to expose any issues at once");
                AgoRapide.Core.Util.EnumGetValues<P>().ForEach(p => AgoRapide.Core.Extensions.GetAgoRapideAttribute(p));
                Log("\r\n\r\n" +
                    "Mapping all " + typeof(AgoRapide.CoreProperty) + " to " + typeof(P) + " in order to expose any issues at once\r\n" +
                    "(note silently mapping to " + (((int)(object)AgoRapide.Core.Util.EnumGetValues<P>().Max()) + 1) + " and onwards for all " + typeof(AgoRapide.CoreProperty) + " not explicitly mapped to a " + typeof(P) + ")\r\n\r\n" +
                    string.Join("\r\n", AgoRapide.Core.Util.EnumGetValues<AgoRapide.CoreProperty>().Select(p => nameof(AgoRapide.CoreProperty) + "." + p + " => " + M(p).ToString())) + "\r\n");
                Log("\r\n\r\n" +
                    "Testing mappings for various types to P via " + nameof(AgoRapide.Core.Util.MapTToTProperty) + " that are known to exist (in order to expose any issues at once)\r\n\r\n" +
                    typeof(AgoRapide.ResultCode) + " => " + typeof(P) + "." + AgoRapide.Core.Util.MapTToTProperty<AgoRapide.ResultCode, P>() + "\r\n" +
                    typeof(AgoRapide.APIMethodOrigin) + " => " + typeof(P) + "." + AgoRapide.Core.Util.MapTToTProperty<AgoRapide.APIMethodOrigin, P>() + "\r\n");
                Log("Miscellaneous testing");
                if (!AgoRapide.Core.Extensions.GetAgoRapideAttribute(P.Password).A.IsPassword) throw new AgoRapide.Core.InvalidEnumException(P.Password, "Not marked as " + nameof(AgoRapide.Core.AgoRapideAttribute) + "." + nameof(AgoRapide.Core.AgoRapideAttribute.IsPassword));

                // TODO: FIX THIS:
                // Log(typeof(AgoRapide.APIMethodOrigin) + " => " + typeof(P) + "." + AgoRapide.Core.Util.MapTToTProperty<AgoRapide.APIMethodOrigin, P>());
                Log("(Add more items above in Startup.cs as you develop your application)");

                Log("SQL_CREATE_TABLE\r\n\r\n" + AgoRapide.Database.PostgreSQLDatabase<P>.SQL_CREATE_TABLE + "\r\n");
                var db = BaseController.GetDatabase(GetType());

                Log("Reading all " + typeof(AgoRapide.ApplicationPart<P>)); // Important before we ask for startupAsApplicationPart
                AgoRapide.ApplicationPart<P>.GetFromDatabase<AgoRapide.ClassAndMethod<P>>(db, text => Log("(by " + typeof(AgoRapide.ApplicationPart<P>) + "." + nameof(AgoRapide.ApplicationPart<P>.GetFromDatabase) + ") " + text)); // TODO: Fix better logging mechanism here

                var startupAsApplicationPart = AgoRapide.ApplicationPart<P>.GetOrAdd<AgoRapide.ClassAndMethod<P>>(GetType(), System.Reflection.MethodBase.GetCurrentMethod().Name, db);
                db.UpdateProperty(startupAsApplicationPart.Id, startupAsApplicationPart, key: M(AgoRapide.CoreProperty.Log), value: "Initiating startup", result: null);

                // ---------------------

                Log("Reading all " + typeof(AgoRapide.EnumClass<P>));
                AgoRapide.ApplicationPart<P>.GetFromDatabase<AgoRapide.EnumClass<P>>(db, text => Log("(by " + typeof(AgoRapide.ApplicationPart<P>) + "." + nameof(AgoRapide.ApplicationPart<P>.GetFromDatabase) + ") " + text)); // TODO: Fix better logging mechanism here

                Log("Calling " + nameof(AgoRapide.EnumClass<P>) + "." + nameof(AgoRapide.EnumClass<P>.RegisterCoreEnumClasses));
                AgoRapide.EnumClass<P>.RegisterCoreEnumClasses(db);
                Log("Calling " + nameof(AgoRapide.EnumClass<P>) + "." + nameof(AgoRapide.EnumClass<P>.RegisterEnumClass) + "<" + typeof(P) + ">");
                AgoRapide.EnumClass<P>.RegisterEnumClass<P>(db);
                // Add here other enum's for which you want documentation (including automatic linking).
                // TODO: ADD WITH GENERIC METHOD!

                // ---------------------

                Log("Looking for " + AgoRapide.CoreProperty.IsAnonymous + " persons");
                var queryId = new AgoRapide.Core.PropertyValueQueryId<P>(M(AgoRapide.CoreProperty.IsAnonymous), AgoRapide.Core.Operator.EQ, true);
                Person anonymousUser; Tuple<AgoRapide.ResultCode, string> errorResponse; if (!db.TryGetEntity(AgoRapide.Core.Util.Configuration.SystemUser, queryId, AgoRapide.AccessType.Read, useCache: true, entity: out anonymousUser, errorResponse: out errorResponse)) {
                    Log(AgoRapide.CoreProperty.IsAnonymous + " person not found, creating one");
                    AgoRapide.Core.Util.Configuration.AnonymousUser = db.GetEntityById<Person>(db.CreateEntity<Person>(
                        cid: startupAsApplicationPart.Id,
                        properties: new List<Tuple<P, object>> {
                                //new Tuple<P, object>(P.FirstName, "anonymous"),
                                //new Tuple<P, object>(P.Last, "anonymous"),
                                new Tuple<P, object>(M(AgoRapide.CoreProperty.Name), "anonymous"),
                                new Tuple<P, object>(M(AgoRapide.CoreProperty.IsAnonymous), true),
                                new Tuple<P, object>(M(AgoRapide.CoreProperty.AccessLevelRead), AgoRapide.AccessLevel.Anonymous),
                                new Tuple<P, object>(M(AgoRapide.CoreProperty.AccessLevelWrite), AgoRapide.AccessLevel.System)
                        },
                        result: null));
                } else {
                    AgoRapide.Core.Util.Configuration.AnonymousUser = anonymousUser;
                }
                // ---------------------

                Log("Reading all " + typeof(AgoRapide.APIMethod<P>));
                AgoRapide.ApplicationPart<P>.GetFromDatabase<AgoRapide.APIMethod<P>>(db, text => Log("(by " + typeof(AgoRapide.ApplicationPart<P>) + "." + nameof(AgoRapide.ApplicationPart<P>.GetFromDatabase) + ") " + text)); // TODO: Fix better logging mechanism here

                AgoRapide.APIMethod<P>.CreateSemiAutogeneratedMethods(
                    controllers: new List<Type> {
                        typeof(HomeController),
                        typeof(AnotherController)  // Add to this list each Controller in your project
                    },
                    attributeClassesSignifyingRequiresAuthorization: new List<Type> {
                        typeof(System.Web.Http.AuthorizeAttribute),
                        typeof(BasicAuthenticationAttribute)
                    },
                    db: db
                );

                AgoRapide.APIMethod<P>.CreateAutogeneratedMethods(
                    types: new List<Type> {
                        typeof(AgoRapide.BaseEntityT<P>),
                        typeof(AgoRapide.APIMethod<P>),
                        typeof(AgoRapide.ClassAndMethod<P>),
                        typeof(AgoRapide.EnumClass<P>),
                        typeof(AgoRapide.Property<P>),
                        typeof(Person),
                        typeof(Car)
                        /// Add to this list each <see cref="AgoRapide.BaseEntityT{TProperty}"/>-derived class in your project 
                        /// for which you want to automatically implement common API-methods like <see cref="AgoRapide.CoreMethod.AddEntity"/> and so on.
                    },
                    db: db
                );

                Log("The following methods where found by " +
                    nameof(AgoRapide.APIMethod<P>) + "." + nameof(AgoRapide.APIMethod<P>.CreateSemiAutogeneratedMethods) + " and " +
                    nameof(AgoRapide.APIMethod<P>) + "." + nameof(AgoRapide.APIMethod<P>.CreateAutogeneratedMethods) + ":\r\n\r\n" +
                    string.Join("\r\n", AgoRapide.APIMethod<P>.AllMethods.Select(r => r.ToString())) + "\r\n");

                if (AgoRapide.APIMethod<P>.IgnoredMethods.Count > 0) {
                    /// Note that we do not delete from the database in cases like this
                    /// (in general as of Feb 2017 we do not have deletion of <see cref="AgoRapide.ApplicationPart{TProperty}"/> no longer in the C# code)
                    Log("In addition the following methods are present in the C# code but where ignored because the " + nameof(AgoRapide.Environment) + " does not match the current one (" + AgoRapide.Core.Util.Configuration.Environment + "):\r\n\r\n" +
                        string.Join("\r\n", AgoRapide.APIMethod<P>.IgnoredMethods.Select(r => r.ToString() + " (" + nameof(r.A.A.Environment) + ": " + r.A.A.Environment + ")")) + "\r\n");
                }

                // ---------------------

                var httpConfiguration = new System.Web.Http.HttpConfiguration();
                WebApiConfig.Register(httpConfiguration);
                Log("Calling Owin.WebApiAppBuilderExtensions.UseWebApi");
                Owin.WebApiAppBuilderExtensions.UseWebApi(appBuilder, httpConfiguration);

                db.UpdateProperty(startupAsApplicationPart.Id, startupAsApplicationPart, key: M(AgoRapide.CoreProperty.Log), value: "Completed startup", result: null);
                Log("Completed");
            } catch (Exception ex) {
                /// Insert your preferred logging mechanism in:
                /// AgoRapideSample.BaseController.LogFinal and AgoRapideSample.BaseController.LogException AND
                /// Startup.cs (multiple places)
                AgoRapide.Core.Util.LogException(ex);
            }
        }

        /// <summary>
        /// Insert your preferred logging mechanism in:
        /// AgoRapideSample.BaseController.LogFinal and AgoRapideSample.BaseController.LogException AND
        /// Startup.cs (multiple places)
        /// </summary>
        /// <param name="text"></param>
        /// <param name="caller"></param>
        private void Log(string text, [System.Runtime.CompilerServices.CallerMemberName] string caller = "") => AgoRapide.Core.Util.Log(GetType().ToString() + "." + caller + ": " + text);
    }

    public class WebApiConfig {
        public static void Register(System.Web.Http.HttpConfiguration httpConfiguration) {
            Log("Calling " + nameof(AgoRapide.API.APIMethodMapper<P>) + "." + nameof(AgoRapide.API.APIMethodMapper<P>.MapHTTPRoutes));
            AgoRapide.API.APIMethodMapper<P>.MapHTTPRoutes(httpConfiguration, AgoRapide.APIMethod<P>.AllMethods.Where(m => m.Origin != AgoRapide.APIMethodOrigin.Autogenerated).ToList());

            Log("Removing XmlFormatter");
            httpConfiguration.Formatters.Remove(httpConfiguration.Formatters.XmlFormatter);
            Log("Adding JSONFormatter");
            httpConfiguration.Formatters.JsonFormatter.MediaTypeMappings.Add(new System.Net.Http.Formatting.QueryStringMapping("json", "true", "application/json"));
            Log("Completed");
        }

        /// <summary>
        /// Insert your preferred logging mechanism in:
        /// AgoRapideSample.BaseController.LogFinal and AgoRapideSample.BaseController.LogException AND
        /// Startup.cs (multiple places)
        /// </summary>
        /// <param name="text"></param>
        /// <param name="caller"></param>
        private static void Log(string text, [System.Runtime.CompilerServices.CallerMemberName] string caller = "") => AgoRapide.Core.Util.Log(typeof(WebApiConfig).ToString() + "." + caller + ": " + text);
    }

    public class UnknownEnvironmentException : ApplicationException {
        public UnknownEnvironmentException(string message) : base(message) { }
        public UnknownEnvironmentException(string message, Exception inner) : base(message, inner) { }
    }

    /// <summary>
    /// Basic Authentication is used in AgoRapideSample for ease-of-getting-started purposes only. 
    /// Do not use Basic Authentication in production! Use OAuth 2.0 or similar.
    /// 
    /// Code is copied from http://stackoverflow.com/questions/28352998/using-both-oauth-and-basic-auth-in-asp-net-web-api-with-owin
    /// </summary>
    public class BasicAuthenticationAttribute : Attribute, System.Web.Http.Filters.IAuthenticationFilter {

        public AgoRapide.AccessLevel AccessLevelUse { get; set; }

        public System.Threading.Tasks.Task AuthenticateAsync(System.Web.Http.Filters.HttpAuthenticationContext context, System.Threading.CancellationToken cancellationToken) {
            var errorResultGenerator = new Func<System.Web.Http.Results.UnauthorizedResult>(() => new System.Web.Http.Results.UnauthorizedResult(new System.Net.Http.Headers.AuthenticationHeaderValue[0], context.Request));
            try {
                var database = BaseController.GetDatabase(GetType());

                var generatePrincipal = new Action<AgoRapide.BaseEntityT<P>>(currentUser => {
                    context.Principal = new System.Security.Claims.ClaimsPrincipal(new[] {
                        new System.Security.Claims.ClaimsIdentity(
                            claims: new List<System.Security.Claims.Claim> {
                                new System.Security.Claims.Claim(System.Security.Claims.ClaimTypes.Name, currentUser.Id.ToString())
                            }, // Note that we use Id and not credArray[0]) here
                            authenticationType: "Basic")
                    });
                    context.Request.Properties["AgoRapideCurrentUser"] = currentUser; // Used by AgoRapide.API.BaseController[TProperty].TryGetCurrentUser.
                                                                                      // TODO: This is not utilized as of Jan 2017
                    context.Request.Properties["AgoRapideDatabase"] = database;
                });

                var headers = context.Request.Headers;
                if (headers.Authorization == null || !"basic".Equals(headers.Authorization.Scheme, StringComparison.OrdinalIgnoreCase)) {
                    // No authorization information given by client. 

                    // Accept as anonymous user if none of the candidate methods require authorization. 
                    // This ensure a more user friendly API and also makes it possible to have AutoGenerated methods without RequiresAuthorization

                    // NOTE: Do not use this for anything security critial.
                    // NOTE: Simply do only
                    // NOTE:   context.ErrorResult = errorResultGenerator();
                    // NOTE: here if security is important. 

                    // Due to bug in Visual Studio 2017 RC build 15.0.26014.0 we can not inline variable declaration here. Leads to CS1003	Syntax error, ',' expected
                    Tuple<AgoRapide.APIMethod<P>, List<string>> exactMatch; Tuple<List<AgoRapide.APIMethod<P>>, int, string> candidateMatches; Tuple<List<AgoRapide.APIMethod<P>>, string> dummy1; 
                    AgoRapide.API.Request<P>.GetMethodsMatchingRequest(context.Request, AgoRapide.API.Request<P>.GetResponseFormatFromURL(context.Request.RequestUri.ToString()), out exactMatch, out candidateMatches, out dummy1);
                    if (
                        (exactMatch != null && exactMatch.Item1.RequiresAuthorization) ||
                        (candidateMatches != null && candidateMatches.Item1.Any(m => m.RequiresAuthorization))
                        ) {
                        context.ErrorResult = errorResultGenerator();
                    } else {
                        if (exactMatch != null && exactMatch.Item1.Origin != AgoRapide.APIMethodOrigin.Autogenerated) throw new AgoRapide.Core.InvalidEnumException(exactMatch.Item1.Origin, "Found " + nameof(exactMatch) + " for " + exactMatch.Item1.Name + " with " + nameof(exactMatch.Item1.Origin) + " " + exactMatch.Item1.Origin + " and " + nameof(exactMatch.Item1.RequiresAuthorization) + " " + exactMatch.Item1.RequiresAuthorization + ". This is not logical, as such an URL should not result in " + System.Reflection.MethodBase.GetCurrentMethod().Name + " being called");
                        generatePrincipal((Person)AgoRapide.Core.Util.Configuration.AnonymousUser); // Careful with casting here. Must match creation of anonymous user in Startup.Configuration
                    }
                } else {
                    var credArray = System.Text.Encoding.GetEncoding("UTF-8").GetString(Convert.FromBase64String(headers.Authorization.Parameter)).Split(':');
                    if (credArray.Length != 2) {
                        context.ErrorResult = errorResultGenerator();
                    } else {
                        // Due to bug in Visual Studio 2017 RC build 15.0.26014.0 we can not inline variable declaration here. Leads to CS1003	Syntax error, ',' expected
                        AgoRapide.BaseEntityT<P> currentUser; if (!database.TryVerifyCredentials(credArray[0], credArray[1], out currentUser)) {
                            context.ErrorResult = errorResultGenerator();
                        } else {
                            generatePrincipal(currentUser);
                        }
                    }
                }
                return System.Threading.Tasks.Task.FromResult(0);
            } catch (Exception ex) {
                /// Insert your preferred logging mechanism in:
                /// AgoRapideSample.BaseController.LogFinal and AgoRapideSample.BaseController.LogException AND
                /// Startup.cs (multiple places)
                AgoRapide.Core.Util.LogException(ex);

                // TODO: Add missing parameters here and return ExceptionResult instead
                // TODO: context.ErrorResult = new System.Web.Http.Results.ExceptionResult(ex, false, null, request, null);
                // TODO: instead of returning UnauthorizedResult like below:
                context.ErrorResult = errorResultGenerator();
                return System.Threading.Tasks.Task.FromResult(0);
            }
        }

        public System.Threading.Tasks.Task ChallengeAsync(System.Web.Http.Filters.HttpAuthenticationChallengeContext context, System.Threading.CancellationToken cancellationToken) {
            context.Result = new ResultWithChallenge(context.Result);
            return System.Threading.Tasks.Task.FromResult(0);
        }

        public class ResultWithChallenge : System.Web.Http.IHttpActionResult {
            private readonly System.Web.Http.IHttpActionResult next;
            public ResultWithChallenge(System.Web.Http.IHttpActionResult next) {
                this.next = next;
            }
            public async System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> ExecuteAsync(System.Threading.CancellationToken cancellationToken) {
                var response = await next.ExecuteAsync(cancellationToken);
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized) {
                    response.Headers.WwwAuthenticate.Add(new System.Net.Http.Headers.AuthenticationHeaderValue("Basic"));
                }
                return response;
            }
        }

        public bool AllowMultiple => false;
        private static void Log(string text, [System.Runtime.CompilerServices.CallerMemberName] string caller = "") => AgoRapide.Core.Util.Log(typeof(BasicAuthenticationAttribute).ToString() + "." + caller + ": " + text);
    }
}